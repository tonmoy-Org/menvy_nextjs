// components/TwoFactorModal.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { toast } from 'react-toastify';

interface TwoFactorModalProps {
  userEmail: string;
  userId: string;
  onVerify: (code: string) => Promise<void>;
  onCancel: () => void;
  onResendCode?: () => Promise<boolean>;
}

export default function TwoFactorModal({
  userEmail,
  onVerify,
  onCancel,
}: TwoFactorModalProps) {
  const [code, setCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [timeLeft, setTimeLeft] = useState(30);

  // Countdown timer effect
  useEffect(() => {
    if (timeLeft === 0) return;
    
    const timer = setTimeout(() => {
      setTimeLeft(timeLeft - 1);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, [timeLeft]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (code.length !== 6) {
      toast.error('Please enter a valid 6-digit authentication code');
      return;
    }

    setIsLoading(true);
    try {
      await onVerify(code);
    } catch (error) {
      // Error handling is done in the parent component
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/\D/g, '').slice(0, 6);
    setCode(value);
    
    // Auto-submit when 6 digits are entered
    if (value.length === 6) {
      handleSubmit(e as unknown as React.FormEvent);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    // Allow only numeric keys and basic navigation
    if (!/[\d\b\t\n]|Arrow|Delete|Home|End/.test(e.key) && !e.ctrlKey && !e.metaKey) {
      e.preventDefault();
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div 
        className="bg-white rounded-lg p-6 w-full max-w-md shadow-xl animate-in fade-in-90 zoom-in-90"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-gray-800">Two-Factor Authentication</h2>
          <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
            <svg 
              className="w-4 h-4 text-blue-600" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M12 11c0 3.517-1.009 6.799-2.753 9.571m-3.44-2.04l.054-.09A13.916 13.916 0 008 11a4 4 0 118 0c0 1.017-.07 2.019-.203 3m-2.118 6.844A21.88 21.88 0 0015.171 17m3.839 1.132c.645-2.266.99-4.659.99-7.132A8 8 0 008 4.07M3 15.364c.64-1.319 1-2.8 1-4.364 0-1.457.39-2.823 1.07-4" 
              />
            </svg>
          </div>
        </div>
    
        <p className="text-lg text-center font-medium text-gray-800 mb-6 truncate">{userEmail}</p>
        
        <p className="text-gray-600 mb-6">
          Please enter the 6-digit verification code generated by your authenticator app.
        </p>

        <form onSubmit={handleSubmit}>
          <div className="space-y-5">
            <div>
              <Label htmlFor="code" className="text-sm font-medium text-gray-700 mb-2 block">
                Verification Code
              </Label>
              <Input
                id="code"
                type="text"
                inputMode="numeric"
                pattern="[0-9]*"
                placeholder="••••••"
                value={code}
                onChange={handleInputChange}
                onKeyDown={handleKeyDown}
                className="text-center text-xl tracking-widest font-medium h-12"
                autoFocus
                autoComplete="one-time-code"
                disabled={isLoading}
              />
            </div>
            <div className="flex gap-3 pt-2">
              <Button
                type="button"
                variant="outline"
                onClick={onCancel}
                className="flex-1 border-gray-300 hover:bg-gray-50"
                disabled={isLoading}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={isLoading || code.length !== 6}
                className="flex-1 bg-sky-300 hover:bg-sky-400 disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                {isLoading ? (
                  <span className="flex items-center justify-center">
                    <svg 
                      className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" 
                      xmlns="http://www.w3.org/2000/svg" 
                      fill="none" 
                      viewBox="0 0 24 24"
                    >
                      <circle 
                        className="opacity-25" 
                        cx="12" 
                        cy="12" 
                        r="10" 
                        stroke="currentColor" 
                        strokeWidth="4"
                      ></circle>
                      <path 
                        className="opacity-75" 
                        fill="currentColor" 
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    Verifying...
                  </span>
                ) : 'Verify'}
              </Button>
            </div>
          </div>
        </form>
        
        <p className="text-xs text-gray-500 mt-6 text-center">
          For security reasons, please verify your identity using two-factor authentication.
        </p>
      </div>
    </div>
  );
}